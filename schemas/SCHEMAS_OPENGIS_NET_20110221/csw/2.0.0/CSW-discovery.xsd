<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema targetNamespace="http://www.opengis.net/cat/csw" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ows="http://www.opengis.net/ows" xmlns:ogc="http://www.opengis.net/ogc" xmlns:csw="http://www.opengis.net/cat/csw" elementFormDefault="qualified" version="2.0.0 2010-01-22" id="csw-discovery">
	<xsd:annotation>
		<xsd:appinfo>
			<dc:identifier xmlns:dc="http://www.purl.org/dc/elements/1.1/">
            http://schemas.opengis.net/csw/2.0.0/discovery
         </dc:identifier>
		</xsd:appinfo>
		<xsd:documentation xml:lang="en">
         This schema defines the request and response messages for the 
         CSW-Discovery interface specified in OGC-04-021, clause 10.
         
         CSW is an OGC Standard.
         Copyright (c) 2004, 2010 Open Geospatial Consortium, Inc. All Rights Reserved.
         To obtain additional rights of use, visit http://www.opengeospatial.org/legal/ .
		</xsd:documentation>
	</xsd:annotation>
	<xsd:include schemaLocation="record.xsd"/>
	<xsd:import namespace="http://www.opengis.net/ows" schemaLocation="http://schemas.opengis.net/ows/0.3.0/owsGetCapabilities.xsd"/>
	<xsd:import namespace="http://www.opengis.net/ogc" schemaLocation="http://schemas.opengis.net/filter/1.0.0/filter.xsd"/>
	<xsd:import namespace="http://www.opengis.net/ogc" schemaLocation="http://schemas.opengis.net/filter/1.0.20/sort.xsd"/>
	<!-- ================================================================== -->
	<!-- =   BASE REQUEST TYPE                                            = -->
	<!-- ================================================================== -->
	<xsd:complexType name="RequestBaseType" abstract="true" id="RequestBaseType">
		<xsd:annotation>
			<xsd:documentation>
            XML encoded CSW operation request base, for all operations
            except Get Capabilities.
         </xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="service" type="ows:ServiceType" use="optional" default="CSW"/>
		<xsd:attribute name="version" type="xsd:string" use="optional" default="2.0.0"/>
	</xsd:complexType>
	<!-- ================================================================== -->
	<!-- =   GetCapabilities Request and Response                         = -->
	<!-- ================================================================== -->
	<!-- REQUEST -->
	<xsd:element name="GetCapabilities" type="csw:GetCapabilitiesType" id="GetCapabilities"/>
	<xsd:complexType name="GetCapabilitiesType" id="GetCapabilitiesType">
		<xsd:annotation>
			<xsd:documentation>
       Request to a CSW to perform the GetCapabilities operation.
       This operation allows a client to retrieve a Capabilities
       XML document providing metadata for the specific CSW server.
       </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="ows:GetCapabilitiesType">
				<xsd:attribute name="service" type="ows:ServiceType" use="optional" default="CSW"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- RESPONSE -->
	<xsd:element name="Capabilities" type="csw:CapabilitiesType" id="Capabilities"/>
	<xsd:complexType name="CapabilitiesType" id="CapabilitiesType">
		<xsd:annotation>
			<xsd:documentation>
            XML encoded CSW GetCapabilities operation response. This
            document provides clients with service metadata about a
            specific service instance, including metadata about the
            tightly-coupled data served. If the server does not implement
            the updateSequence parameter, the server shall always return
            the complete Capabilities document, without the updateSequence
            parameter. When the server implements the updateSequence
            parameter and the GetCapabilities operation request included
            the updateSequence parameter with the current value, the server
            shall return this element with only the "version" and
            "updateSequence" attributes. Otherwise, all optional elements
            shall be included or not depending on the actual value of the
            Contents parameter in the GetCapabilities operation request.
         </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="ows:CapabilitiesBaseType">
				<xsd:sequence>
					<!--
                 <xsd:element ref="ogc:FilterCapabilities" minOccurs="0"/>
	       -->
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- ================================================================== -->
	<!-- =   DescribeRecord Request and Response                          = -->
	<!-- ================================================================== -->
	<!-- REQUEST -->
	<xsd:element name="DescribeRecord" type="csw:DescribeRecordType" id="DescribeRecord"/>
	<xsd:complexType name="DescribeRecordType" id="DescribeRecordType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
            This request allows a user to discover elements of the
            information model supported by the catalogue service.
            If no TypeName elements are provided, then all of the schemas for 
            the information model are returned
      
            schemaLanguage - preferred schema language
                             (W3C XML Schema by default)
            outputFormat - preferred output format (text/xml by default)
         </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="csw:RequestBaseType">
				<xsd:sequence>
					<xsd:element name="TypeName" type="csw:TypeNameType" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
				<xsd:attribute name="outputFormat" type="xsd:string" use="optional" default="text/xml"/>
				<xsd:attribute name="schemaLanguage" type="xsd:anyURI" use="optional" default="http://www.w3.org/XML/Schema"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="TypeNameType" id="TypeNameType">
		<xsd:annotation>
			<xsd:documentation>
            The unqualified name of the model element for which the type 
            definition is requested. The targetNamespace MUST be specified, 
            although it may have the value "##any" to indicate any namespace.
         </xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="xsd:NCName">
				<xsd:attribute name="targetNamespace" type="xsd:anyURI" use="required"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<!-- RESPONSE -->
	<xsd:element name="DescribeRecordResponse" type="csw:DescribeRecordResponseType" id="DescribeRecordResponse"/>
	<xsd:complexType name="DescribeRecordResponseType" id="DescribeRecordResponseType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
            The response contains a list of matching schema components
            in the requested schema language.
         </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="SchemaComponent" type="csw:SchemaComponentType" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="SchemaComponentType" id="SchemaComponentType" mixed="true">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
            A schema component includes a schema fragment (type
            definition) or an entire schema from some target namespace;
            the schema language is identified by URI. If the component
            is a schema fragment its parent MUST be referenced (parentSchema).
         </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:any namespace="##any" processContents="lax"/>
		</xsd:sequence>
		<xsd:attribute name="targetNamespace" type="xsd:anyURI" use="required"/>
		<xsd:attribute name="parentSchema" type="xsd:anyURI" use="optional"/>
		<xsd:attribute name="schemaLanguage" type="xsd:anyURI" use="required"/>
	</xsd:complexType>
	<!-- ================================================================== -->
	<!-- =   GetRecords Request and Response                              = -->
	<!-- ================================================================== -->
	<!-- REQUEST -->
	<xsd:element name="GetRecords" type="csw:GetRecordsType" id="GetRecords"/>
	<xsd:complexType name="GetRecordsType" id="GetRecordsType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
            The principal means of searching catalogue content. The
            matching catalogue entries may be included with the response.
            The client may assign a requestId (absolute URI). A distributed
            search is performed if the distributedSearch element is present.
         </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="csw:RequestBaseType">
				<xsd:sequence>
					<xsd:element name="DistributedSearch" type="csw:DistributedSearchType" minOccurs="0"/>
					<xsd:element name="ResponseHandler" type="xsd:anyURI" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element ref="csw:AbstractQuery"/>
				</xsd:sequence>
				<xsd:attribute name="requestId" type="xsd:anyURI" use="optional"/>
				<xsd:attribute name="resultType" type="csw:ResultType" use="optional" default="hits"/>
				<xsd:attributeGroup ref="csw:BasicRetrievalOptions"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:attributeGroup name="BasicRetrievalOptions" id="BasicRetrievalOptions">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
            Various attributes that specify basic retrieval options:

            outputFormat   - the media type of the response message
            outputSchema   - the schema for the records in the result set
            startPosition  - requests a slice of the result set, starting
                             at this position
            maxRecords     - the maximum number of records to return. No
                             records are  returned if maxRecords=0.
         </xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="outputFormat" type="xsd:string" use="optional" default="text/xml"/>
		<xsd:attribute name="outputSchema" type="xsd:anyURI" use="optional"/>
		<xsd:attribute name="startPosition" type="xsd:positiveInteger" use="optional" default="1"/>
		<xsd:attribute name="maxRecords" type="xsd:nonNegativeInteger" use="optional" default="10"/>
	</xsd:attributeGroup>
	<xsd:simpleType name="ResultType" id="ResultType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="results">
				<xsd:annotation>
					<xsd:documentation>
          Include results in the response.
          </xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="hits">
				<xsd:annotation>
					<xsd:documentation>
          Provide a result set summary, but no results.
          </xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="validate">
				<xsd:annotation>
					<xsd:documentation>
          Validate the request and return an Acknowledgement message if it 
	  passes. Continue processing the request asynchronously.
          </xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="DistributedSearchType" id="DistributedSearchType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
            Governs the behaviour of a distributed search.
            hopCount     - the maximum number of message hops before
                           the search is terminated. Each catalogue decrements 
                           this when the request is received, and does not 
                           forward it if hopCount=0.
         </xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="hopCount" type="xsd:positiveInteger" use="optional" default="2"/>
	</xsd:complexType>
	<xsd:element name="AbstractQuery" type="csw:AbstractQueryType" abstract="true" id="AbstractQuery"/>
	<xsd:complexType name="AbstractQueryType" abstract="true" id="AbstractQueryType"/>
	<xsd:element name="Query" type="csw:QueryType" substitutionGroup="csw:AbstractQuery" id="Query"/>
	<xsd:complexType name="QueryType" id="QueryType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
            Specifies a query to execute against instances of one or
            more object types. The ElementName elements specify
            the object types to be included in the result set. The
            QueryConstraint element contains a query filter expressed
            in a supported query language. A sorting criterion that
            specifies a property to sort on may be included.

            typeNames - a list of object types implicated in the query
                        specification
         </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="csw:AbstractQueryType">
				<xsd:sequence>
					<xsd:choice>
						<xsd:element ref="csw:ElementSetName"/>
						<xsd:element name="ElementName" type="xsd:anyURI" maxOccurs="unbounded"/>
					</xsd:choice>
					<xsd:element ref="csw:Constraint" minOccurs="0"/>
					<xsd:element ref="ogc:SortBy" minOccurs="0"/>
				</xsd:sequence>
				<xsd:attribute name="typeNames" type="csw:TypeNameListType" use="required"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:simpleType name="TypeNameListType" id="TypeNameListType">
		<xsd:list itemType="xsd:anyURI"/>
	</xsd:simpleType>
	<xsd:element name="Constraint" type="csw:QueryConstraintType" id="Constraint"/>
	<xsd:complexType name="QueryConstraintType" id="QueryConstraintType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
            A query constraint that adheres to one of the following syntaxes:
            Filter   - OGC filter expression
            CqlText  - OGC CQL predicate
         </xsd:documentation>
		</xsd:annotation>
		<xsd:choice>
			<xsd:element ref="ogc:Filter"/>
			<xsd:element name="CqlText" type="xsd:string"/>
		</xsd:choice>
		<xsd:attribute name="version" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Query language version</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ElementSetName" type="csw:ElementSetNameType" default="summary" id="ElementSetName"/>
	<xsd:complexType name="ElementSetNameType" id="ElementSetNameType">
		<xsd:simpleContent>
			<xsd:extension base="csw:ElementSetType">
				<xsd:attribute name="typeNames" type="csw:TypeNameListType" use="optional"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:simpleType name="ElementSetType" id="ElementSetType">
		<xsd:annotation>
			<xsd:documentation>
            Named subsets of catalogue object properties; these
            views are bound to a specific information model and
            are defined within an application profile.
         </xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="brief"/>
			<xsd:enumeration value="summary"/>
			<xsd:enumeration value="full"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!-- RESPONSE -->
	<xsd:element name="GetRecordsResponse" type="csw:GetRecordsResponseType" id="GetRecordsResponse"/>
	<xsd:complexType name="GetRecordsResponseType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
            The response message for a GetRecords request. Some or all of the 
            matching records may be included as children of the searchResults 
            element. The requestId is included if the client specified it.
         </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="RequestId" type="xsd:anyURI" minOccurs="0"/>
			<xsd:element name="SearchStatus" type="csw:RequestStatusType"/>
			<xsd:element name="SearchResults" type="csw:SearchResultsType"/>
		</xsd:sequence>
		<xsd:attribute name="version" type="xsd:string" use="optional"/>
	</xsd:complexType>
	<xsd:complexType name="RequestStatusType" id="RequestStatusType">
		<xsd:annotation>
			<xsd:documentation>
            This element provides information about the status of the
            search request.

            status    - status of the search
            timestamp - The date and time when the result set was last updated 
                        (ISO 8601 format)
         </xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="status" type="csw:StatusType" use="required"/>
		<xsd:attribute name="timestamp" type="xsd:dateTime" use="optional"/>
	</xsd:complexType>
	<xsd:simpleType name="StatusType" id="StatusType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="complete">
				<xsd:annotation>
					<xsd:documentation>
                  The request was successfully completed and valid results
                  are available.
               </xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="subset">
				<xsd:annotation>
					<xsd:documentation>
                  Partial, valid results are available.
               </xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="interim">
				<xsd:annotation>
					<xsd:documentation>
                  Partial results available, not necessarily valid.
               </xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="none">
				<xsd:annotation>
					<xsd:documentation>No results are available</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="processing">
				<xsd:annotation>
					<xsd:documentation>
                  Request is still being processed.  Its status will be set
                  to complete when request is done.
               </xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="SearchResultsType" id="SearchResultsType">
		<xsd:annotation>
			<xsd:documentation>
            Returns representations of result set members if maxRecords > 0.
            resultSetId       - id of the result set (a URI).
            elementSet        - The element set that has been returned
                                (i.e., "brief", "summary", "full")
            recordSchema      - schema reference for included records(URI)
            numberOfRecordsMatched  - number of records matched by the query
            numberOfRecordsReturned - number of records returned to client
            nextRecord        - position of next record in the result set
                                (0 if no records remain).
            expires           - the time instant when the result set
                                expires and is discarded (ISO 8601 format)
         </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="csw:AbstractRecord" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="resultSetId" type="xsd:anyURI" use="optional"/>
		<xsd:attribute name="elementSet" type="csw:ElementSetType" use="optional"/>
		<xsd:attribute name="recordSchema" type="xsd:anyURI" use="optional"/>
		<xsd:attribute name="numberOfRecordsMatched" type="xsd:nonNegativeInteger" use="required"/>
		<xsd:attribute name="numberOfRecordsReturned" type="xsd:nonNegativeInteger" use="required"/>
		<xsd:attribute name="nextRecord" type="xsd:nonNegativeInteger" use="optional"/>
		<xsd:attribute name="expires" type="xsd:dateTime" use="optional"/>
	</xsd:complexType>
	<!-- ================================================================== -->
	<!-- =   GetRecordById Request and Response                           = -->
	<!-- ================================================================== -->
	<!-- REQUEST -->
	<xsd:element name="GetRecordById" type="csw:GetRecordByIdType" id="GetRecordById"/>
	<xsd:complexType name="GetRecordByIdType" id="GetRecordByIdType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
            Requests the default representation of a catalogue object
            Id - object idenitifier (a URI)
            ElementSetName - one of "brief, "summary", or "full"
         </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="csw:RequestBaseType">
				<xsd:sequence>
					<xsd:element name="Id" type="xsd:anyURI"/>
					<xsd:element ref="csw:ElementSetName" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- RESPONSE -->
	<xsd:element name="GetRecordByIdResponse" type="csw:GetRecordByIdResponseType" id="GetRecordByIdResponse"/>
	<xsd:complexType name="GetRecordByIdResponseType" id="GetRecordByIdResponseType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
            Returns a representation of the matching catalogue object.
            If there is no matching record, the response message element
            is empty.
         </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="csw:AbstractRecord" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- ================================================================== -->
	<!-- =   GetDomain Request and Response                               = -->
	<!-- ================================================================== -->
	<!-- REQUEST -->
	<xsd:element name="GetDomain" type="csw:GetDomainType" id="GetDomain"/>
	<xsd:complexType name="GetDomainType" id="GetDomainType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
        Requests the actual values of some specified property or data element.
        </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="csw:RequestBaseType">
				<xsd:sequence>
					<xsd:choice>
						<xsd:element name="PropertyName" type="xsd:QName"/>
						<xsd:element name="ParameterName" type="xsd:QName"/>
					</xsd:choice>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- RESPONSE -->
	<xsd:element name="GetDomainResponse" type="csw:GetDomainResponseType" id="GetDomainResponse"/>
	<xsd:complexType name="GetDomainResponseType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
         Returns the actual values for some property. In general this is a
         subset of the value domain (that is, set of permissible values),
         although in some cases these may coincide. Multiple value ranges
         may be returned if the property can assume values from multiple
         value domains (e.g. multiple taxonomies).
         </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="DomainValues" type="csw:DomainValuesType" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="DomainValuesType" id="DomainValuesType">
		<xsd:sequence>
			<xsd:choice>
				<xsd:element name="PropertyName" type="xsd:QName"/>
				<xsd:element name="ParameterName" type="xsd:QName"/>
			</xsd:choice>
			<xsd:choice minOccurs="0">
				<xsd:element name="ListOfValues" type="csw:ListOfValuesType"/>
				<xsd:element name="ConceptualScheme" type="csw:ConceptualSchemeType"/>
				<xsd:element name="RangeOfValues" type="csw:RangeOfValuesType"/>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="type" type="xsd:QName" use="required"/>
		<xsd:attribute name="uom" type="xsd:anyURI" use="optional"/>
	</xsd:complexType>
	<xsd:complexType name="ListOfValuesType" id="ListOfValuesType">
		<xsd:sequence>
			<xsd:element name="Value" type="xsd:anyType" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="ConceptualSchemeType" id="ConceptualSchemeType">
		<xsd:sequence>
			<xsd:element name="Name" type="xsd:string"/>
			<xsd:element name="Document" type="xsd:anyURI"/>
			<xsd:element name="Authority" type="xsd:anyURI"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="RangeOfValuesType" id="RangeOfValuesType">
		<xsd:sequence>
			<xsd:element name="MinValue" type="xsd:anyType"/>
			<xsd:element name="MaxValue" type="xsd:anyType"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="Acknowledgement" type="csw:AcknowledgementType" id="Acknowledgement"/>
	<xsd:complexType name="AcknowledgementType" id="AcknowledgementType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
         This is a general acknowledgement response message for all requests 
         that may be handled in an asynchronous manner.
         EchoedRequest- Echoes the submitted request message
         RequestId    - identifier for polling purposes (if no response 
                        handler is available, or the URL scheme is
                        unsupported)                    
         </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="EchoedRequest" type="csw:EchoedRequestType"/>
			<xsd:element name="RequestId" type="xsd:anyURI" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attribute name="timeStamp" type="xsd:dateTime" use="required"/>
	</xsd:complexType>
	<xsd:complexType name="EchoedRequestType" id="EchoedRequestType">
		<xsd:sequence>
			<xsd:any namespace="##any" processContents="lax"/>
		</xsd:sequence>
	</xsd:complexType>
</xsd:schema>
