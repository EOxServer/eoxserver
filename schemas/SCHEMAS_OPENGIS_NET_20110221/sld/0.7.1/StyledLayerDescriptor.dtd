<!-- S T Y L E D   L A Y E R   D E S C R I P T O R  version 0.7.1 -->

<!-- Copyright (c) 2001 OGC.  All rights reserved. -->

<!-- The authoritative definition of SLD is the OGC SLD Specification
document.  Comments in this DTD are informative only and not normative. -->

<!-- Summary of changes between 0.7.0 and 0.7.1 (in order of appearance):

 * Comments have been beefed up and semantics and default values have
   been described.

 * Some attributes were shifted to being elements on the general philosophy
   of using attributes only for primary keys and using elements for
   dependent variables.

 * A "version" tag has been added to StyledLayerDescriptor.

 * The UserLayer has been changed to accept multiple
   FeatureTypeConstraints.  Given that a named layer conceptually can
   have multiple feature types, limiting a user-defined layer to only
   have one is inconsistent.

 * name, Title, Abstract, and IsDefault have been added to UserStyle.
   The 'dependent-variable' "title" attribute has been made into an
   element.  Also, only Rules can be included directly inside a UserStyle,
   and Symbols have been moved inside of Rules.

 * A Rule element has been added to group and select symbols for rendering
   under certain scale and filter-constraint conditions.

 * A RasterSymbol has been added for styling raster/matrix coverages.

 * Symbols and parameters have been reordered in the DTD to be in a
   topological order.  This may or may not make the DTD easier to read.

 * Symbol parameters such as StrokeColor and StrokeOpacity have been
   'refactored' into container elements such as Stroke.  This allows a
   much cleaner modelling and reuse of the parameter information.

 * Repeated graphics have been added to fill and stroke patterns.

 * A Graphic element has been added to externally reference pre-defined
   graphic symbols in various formats (e.g., GIF or SVG).  A graphic has
   an inherent shape and coloring.  A Graphic can also reference a Mark
   which combines a basic shape with user-defined coloring.

 * New parameters have been added to various symbols.
-->

<!-- StyledLayerDescriptor: This is a sequence of styled layers,
represented at the first level by NamedLayer and UserLayer elements.
A "version" attribute has been added to allow the formatting of static-file
SLD documents to be identified for backwards compatibility. -->

<!ELEMENT StyledLayerDescriptor ((NamedLayer | UserLayer)*) >
<!ATTLIST StyledLayerDescriptor version CDATA #IMPLIED >


<!-- L A Y E R S   A N D   S T Y L E S  -->

<!-- NamedLayer: A NamedLayer uses the "name" attribute to identify a layer
known to the WMS and can contain zero or more styles, either NamedStyles
or UserStyles.  In the absence of any styles the default style for the
layer is used. -->

<!ELEMENT NamedLayer ((NamedStyle | UserStyle)*) >
<!ATTLIST NamedLayer name CDATA #REQUIRED >

<!-- NamedStyle: A NamedStyle uses the "name" attribute to identify a
style known to the WMS. -->

<!ELEMENT NamedStyle EMPTY >
<!ATTLIST NamedStyle name CDATA #REQUIRED >

<!-- UserLayer: A UserLayer can contain one or more UserStyles.
A UserLayer may direct the WMS to a specified WFS source of feature data.
Multiple feature types can be included in a UserLayer, since this is
semantically equivalent to a NamedLayer.  All feature types of a UserLayer
come from the same WFS.  The WFS can be named explicitly with the "wfs"
attribute or it can be implied by context. -->

<!ELEMENT UserLayer (FeatureTypeConstraint+, UserStyle+) >
<!ATTLIST UserLayer wfs CDATA #IMPLIED
                    wcs CDATA #IMPLIED
                    name CDATA #IMPLIED >

<!-- FeatureTypeConstraint: This is used to constrain the contents of a
UserLayer to be all the features of a specified feature-type.  The feature-
type is specified with the typeName attribute. -->

<!ELEMENT FeatureTypeConstraint EMPTY >
<!ATTLIST FeatureTypeConstraint typeName CDATA #REQUIRED >

<!-- UserStyle: A UserStyle allows user-defined styling and is semantically
equivalent to a named style in the sense that a named style could be
thought to be a reference to a UserStyle stored inside of a map server.
A UserStyle can contain one or more Rules which allow conditional rendering
of symbols.  To enable editing of named styles inside of a map server,
a "name" attribute has been added to the UserStyle element.

The Title and Abstract elements contain a description of the style as
a whole and might be used in a pick list to select which style to use.
The IsDefault element identifies whether a style is the default style,
for storing inside of a map server.  IsDefault uses "1" for true and "0"
for false.  The default is "0". -->

<!ELEMENT UserStyle (
            Title?,
            Abstract?,
            IsDefault?,
            Rule+) >
<!ATTLIST UserStyle name CDATA #IMPLIED >
<!ELEMENT Title (#PCDATA) >
<!ELEMENT Abstract (#PCDATA) >
<!ELEMENT IsDefault (#PCDATA) >

<!-- Symbols entity: This is used to group the symbol types below.
A system is free to simplify its geometries before rendering and to
deconflict its labels.  There are no controls for these activities.
This declaration is placed at this awkward location since Rule refers to
it. -->

<!ENTITY % Symbols "(
            LineStringSymbol |
            PolygonSymbol |
            PointSymbol |
            TextSymbol |
            RasterSymbol)" >

<!-- Rule: A rule is used to attach a condition to and group the individual
symbols used for rendering.  Only a single feature type can be in-context
inside of a rule, since attribute-reference semantics would become
too imprecise otherwise.  The FeatureTypeConstraint can be left out
only if the source layer includes only one feature type.  The Title and
Abstract describe the rule and may be used to generate a legend, as may
the LegendGraphic.

The Filter, ElseFilter, MinScale, and MaxScale elements allow the selection
of features and rendering scales for a rule.  The scale selection works
as follows.  When a map is to be rendered, the scale denominator is
computed and all rules in all <UserStyle>s that have a scale outside
of the request range are dropped.  (This also includes <Rule>s that
have an <ElseFilter>.)  An <ElseFilter> is simply an ELSE condition to
the conditions (<Filter>s) of all other rules in the same <UserStyle>.
The exact meaning of the <ElseFilter> is determined after <Rule>s have been
eliminated for not fitting the rendering scale.  This definition of the
behaviour of <ElseFilter>s may seem a little strange, but it allows for
scale-dependent and scale-independent ELSE conditions.  For the <Filter>,
only <SqlExpression> is available for specification, but this is a hack
and should be replaced with <Filter> as defined in WFS.

A missing Filter element means "always true".  If a set of Rules has no
ElseFilters, then some features may not be rendered (which is presumably
the desired behavior).  The Scales are actually scale denominators
(as double floats), so "10e6" would be interpreted as 1:10M.  A missing
MinScale means there is no lower bound to the scale-denominator range
(lim[x->0+](x)), and a missing MaxScale means there is no upper bound
(infinity).  Scales are standardized to be relative to a 0.28mm-square
pixel. -->

<!ELEMENT Rule (
            Title?,
            Abstract?,
            LegendGraphic?,
            FeatureTypeConstraint?,
            (Filter | ElseFilter)?,
            MinScale?,
            MaxScale?,
            (%Symbols;)* )>
<!ATTLIST Rule name CDATA #IMPLIED >
<!ELEMENT LegendGraphic (Graphic) >
<!ELEMENT Filter (SqlExpression) >
<!ELEMENT SqlExpression (#PCDATA) >
<!ELEMENT ElseFilter EMPTY >
<!ELEMENT MinScale (#PCDATA) >
<!ELEMENT MaxScale (#PCDATA) >


<!-- S Y M B O L S -->

<!-- Symbol parameters that can provide values 'fetched' from the feature
being symbolized.  In principal the FetchFeatureProperty element can be
added as an alternative to #PCDATA in all of the parameters.  The 'result'
of fetching a feature property cannot be typed using the DTD.  In the
limited examples given to date it has only ever been necessary to provide
this capability in a couple of places. -->


<!-- L I N E - S T R I N G   S Y M B O L -->

<!-- LineStringSymbol: Used to render a "stroke" along a string of line
segments.  If a point geometry is used, it should be interpreted as a
line of zero length and two end caps.  If a polygon is used, then its
closed outline is used as the line string (with no end caps).   A missing
Geometry element selects the default geometry.  A missing Stroke element
means that nothing will be plotted. -->

<!ELEMENT LineStringSymbol (
            Geometry?,
            Stroke? ) >

<!-- Geometry: This provides the geometry to be symbolized.  In principle
this could be a fixed geometry defined using GML.  However it is most
commonly 'fetched' from a named property on the feature. -->

<!ELEMENT Geometry (FetchFeatureProperty) >

<!-- Element indicating that the 'name'd property should be fetched from
the feature being symbolized. -->

<!ELEMENT FetchFeatureProperty EMPTY >
<!ATTLIST FetchFeatureProperty name CDATA #REQUIRED >

<!-- Stroke: A Stroke allows a string of line segments (or any linear
geometry) to be rendered.  There are three basic types of strokes: solid
Color, GraphicFill (stipple), and repeated Graphic.  A repeated graphic
is plotted linearly and has its graphic symbol bended around the curves
of the line string.  The default is a solid black line (Color "#000000").
Various parameters are available for all basic types, including Opacity
(default 1.0), Width (default 1.0), LineJoin and LineCap (system-dependent
defaults), and DashArray (default unbroken line).  The DashArray allows
for dash-dot patterns.  In general, a missing reference to a Stroke means
that no stroke is to be rendered, same as selecting an opacity of 0.0. -->

<!ELEMENT Stroke (
            (Color | GraphicFill | Graphic)?,
            Opacity?,
            Width?,
            LineJoin?,
            LineCap?,
            DashArray? ) >

<!-- Color: Currently colors are RGB encoded using two hex values per
channel and prefixed with a hash (#).  For example full red is #ff0000.
The default color is defined in the context of a higher-level element. -->

<!ELEMENT Color (#PCDATA) >

<!-- GraphicFill: This contains a graphic which is used for
repeated-graphic filling (stippling) of an area.  Additional parameters
may be provided in the future to control the exact filling. -->

<!ELEMENT GraphicFill (Graphic) >

<!-- Opacity: Encoded as a double with 0.0 representing transparent and
1.0 representing completely opaque.  The default is 1.0. -->

<!ELEMENT Opacity (#PCDATA) >

<!-- Width: Gives the absolute width of a stroke in pixels encoded as
a double float.  Arguably, we could provide more units for encoding
sizes, such as millimeters or typesetter's points.  The default is 1.0.
Fractional numbers are allowed (with system-dependent interpretation)
but negative numbers are not. -->

<!ELEMENT Width (#PCDATA) >

<!-- LineJoin & LineCap: Parameters that encode an enumerated value
telling how line strings should be joined (between line segments) and
capped (at the two ends of the line string).  Default values are system-
dependent. -->

<!ELEMENT LineJoin (MITRE | ROUND | BEVEL) >
<!ELEMENT LineCap (BUTT | ROUND | SQUARE) >
<!ELEMENT MITRE EMPTY >
<!ELEMENT ROUND EMPTY >
<!ELEMENT BEVEL EMPTY >
<!ELEMENT BUTT EMPTY >
<!ELEMENT SQUARE EMPTY >

<!-- DashArray: Encodes a dash pattern as a series of space-separated
double floats.  Negatives are not allowed but zeros mean dots.  The first
number gives the length in pixels of dash to draw, the second gives
the amount of space, and this pattern repeats.  Decimal values have a
system-dependent interpretation (usually depending on whether antialiasing
is being used).  The default is to draw an unbroken line. -->

<!ELEMENT DashArray (#PCDATA) >


<!-- P O L Y G O N   S Y M B O L -->

<!-- Polygon Symbol: Used to render an interior "fill" and an outlining
"stroke" for a polygon or other 2D-area geometry.  If a point or line
are used, the fill is ignored and the stroke is used as described in
the LineStringSymbol.  A missing Geometry element selects the default
geometry.  A missing Fill or Stroke element means that there will be
no fill or stroke plotted, respectively.  The contained elements are in
the conceptual order of their being used and plotted using the "painters
model", where the Fill will be rendered first, and then the Stroke will
be rendered on top of the Fill. -->

<!ELEMENT PolygonSymbol (
            Geometry?,
            Fill?,
            Stroke? ) >

<!-- Fill: A Fill allows area geometries to be filled.  There are two types
of fills: solid Color and repeated GraphicFill.  In general, if a Fill
element is omitted in its containing element, no fill will be rendered.
The default is a solid 50%-gray (Color "#808080") opaque fill. -->

<!ELEMENT Fill (
            (Color | GraphicFill)?,
            Opacity? ) >

<!-- P O I N T   S Y M B O L -->

<!-- PointSymbol: Used to render a "graphic" at a point.  If a line-string
or polygon geometry is used with this symbol, then the semantic is to
use the centroid of the geometry, or any similar representative point.
The meaning of the contained elements are discussed with the element
definitions below.  If the Geometry element is omitted, then the "default"
geometry for the feature type is used.  (Many feature types will have
only one geometry attribute.)  If the Graphic element is omitted, then
nothing will be plotted. -->

<!ELEMENT PointSymbol (
            Geometry?,
            Graphic? ) >

<!-- Graphic: A Graphic is a "graphic symbol" with an inherent shape,
color, and size.  Graphics can either be referenced from an external URL
in a common format (such as GIF or SVG) or may be derived from a Mark.
Multiple external URLs may be referenced with the semantic that they
all provide the same graphic in different formats.  The "hot spot" to
use for rendering at a point or the start and finish handle points to
use for rendering a graphic along a line must either be inherent in the
external format or are system- dependent.  The default size of an image
format (such as GIF) is the inherent size of the image.  The default
size of a format without an inherent size is 16 pixels in height and the
corresponding aspect in width.  If a size is specified, the height of the
graphic will be scaled to that size and the corresponding aspect will be
used for the width.

The default if neither an ExternalURL nor a Mark is specified is to use
the default Mark with a size of 6 pixels.  The size is in pixels and the
rotation is in degrees clockwise, with 0 (default) meaning no rotation.
In the case that a Graphic is derived from a font-glyph Mark, the Size
specified here will be used for the final rendering. -->

<!ELEMENT Graphic (
            (ExternalURL+ | Mark)?,
            Size?,
            Rotation? ) >

<!-- ExternalURL: Reference to an external URL.  The "mimeType" attribute
identifies the expected document type of a successful fetch.  Multiple
ExternalURLs are often provided in places of an external reference to
allow a map server to select its best-supported format from a list of
URLs with equivalent content. -->

<!ELEMENT ExternalURL (#PCDATA) >
<!ATTLIST ExternalURL mimeType CDATA #REQUIRED >

<!-- Mark: A Mark takes a "shape" and applies coloring to it.  The shape
can be derived either from a well-known name (such as "square"), an
external URL in various formats (such as, perhaps GIF), or from a glyph
of a font.  Multiple external formats may be used with the semantic that
they all contain the equivalent shape in different formats.  If an image
format is used that has inherent coloring, the coloring is discarded and
only the opacity channel (or equivalent) is used.  A Halo, Fill, and/or
Stroke is applied as appropriate for the shape's source format.  -->

<!ELEMENT Mark (
            (WellKnownName | ExternalURL+ |
              (Font+, GlyphCode, Halo?) )?,
            Fill?,
            Stroke? ) >

<!-- WellKnownName: Gives the well known name of a Mark's shape.
Allowed values include at least "square", "circle", "triangle", "star",
"cross", and "x", though map servers may draw a different symbol instead
if they don't have a shape for all of these.  Renderings of these marks
may be made solid or hollow depending on Fill and Stroke parameters.
The default value is "square". -->

<!ELEMENT WellKnownName (#PCDATA) >

<!-- GlyphCode: Gives the glyph code inside of a font to use.  Glyph codes
are specified as Unicode characters in hexadecimal with a preceeding '#'
sign, similar to Color. -->

<!ELEMENT GlyphCode (#PCDATA) >

<!-- Size: Gives the absolute size of various objects in pixels encoded
as a double float.  The units of pixels are used even for Font Size.
Default sizes are context dependent.  Negative values are not allowed.-->

<!ELEMENT Size (#PCDATA) >

<!-- Rotation: Gives the rotation of an object in the clockwise direction
in decimal degrees, encoded as a double float.  Negative values mean
counter-clockwise rotation.  The default value is 0.0 (no rotation).
Multiple value-source types are allowed since a rotation amount could
potentially be stored an attribute in a label feature type.  The '*'
is added only to satisfy the broken DTD encoding; there should always be
one element/content value. -->

<!ELEMENT Rotation (#PCDATA | FetchFeatureProperty | SqlExpression)* >


<!-- T E X T   S Y M B O L -->

<!-- TextSymbol: Used to render a text label, according to the parameters.
A missing Geometry, Label, Font, or LabelPlacement element selects the
default value or behavior for the element.  The default Label, Font, and
LabelPlacement are system-dependent.  Multiple Font elements may be used
to specify alternate fonts in order of preference in case a map server
does not support the first preference.  A missing Halo or Fill element
means that no halo or fill will be plotted, respectively.  The Fill is
rendered over top of the Halo, and the Halo includes the interiors of
the font glyphs. -->

<!ELEMENT TextSymbol (
            Geometry?,
            Label?,
            Font*,
            LabelPlacement?,
            Halo?,
            Fill? ) >

<!-- Label: Parameter to provide text-label content.  When label content is
'fetched' from a feature property, the type of the property is unimportant
and the symbol is expected to provide a text version of the property
whatever its type. -->

<!ELEMENT Label (#PCDATA | FetchFeatureProperty | SqlExpression)* >

<!-- Font: Identifies a Font of a certain family, style, and size. -->

<!ELEMENT Font (
            Family?,
            Style?,
            Size? ) >

<!-- Family: Gives the family name of a font to use.  Allowed values
are system-dependent.  (This doesn't help much.) -->

<!ELEMENT Family (#PCDATA) >

<!-- Style: Gives the style to use for a font.  Multiple keywords may be
combined where an interpretation is possible, such as <BOLD/><ITALIC/>.
Where a combination isn't possible, the first keyword is used. -->

<!ELEMENT Style ((NORMAL | ITALIC | OBLIQUE | BOLD)+) >
<!ELEMENT NORMAL EMPTY>
<!ELEMENT ITALIC EMPTY>
<!ELEMENT OBLIQUE EMPTY>
<!ELEMENT BOLD EMPTY>

<!-- LabelPlacement: Used to position a label relative to a point or a
line string.  For a point, you can specify the anchor point of the label
and a linear displacement from the point (so that you can also plot
a graphic symbol at the point).  For a line-string placement, you can
specify a perpendicular offset (so you can draw a stroke on the line).
MORE PARAMETERS ARE PROBABLY NEEDED HERE. -->

<!ELEMENT LabelPlacement (
            PointPlacement |
            LineStringPlacement ) >
<!ELEMENT PointPlacement (
            AnchorPoint?,
            Displacement?,
            Rotation? ) >
<!ELEMENT LineStringPlacement (
            PerpendicularOffset? ) >

<!-- AnchorPoint: Gives the location inside of a label to use for anchoring
the label to the main-geometry point.  The coordinates are given as two
double floats in AnchorPointX and AnchorPointY elements each with values
between 0.0 and 1.0 inclusive.  The bounding box of the label to be
rendered is considered to be in a coorindate space from 0.0 (lower-left
corner) to 1.0 (upper-right corner), and the anchor is specified as a
point in this space.  The default point is X=0, Y=0.5 which is at the
middle height of the left-hand side.  A system may choose a different
anchor point for label deconfliction. -->

<!ELEMENT AnchorPoint (AnchorPointX, AnchorPointY) >
<!ELEMENT AnchorPointX (#PCDATA) >
<!ELEMENT AnchorPointY (#PCDATA) >

<!-- Displacement: Gives the X and Y displacements from the main-geometry
point to render a text label.  This will often be used to avoid
over-plotting a graphic symbol marking a city or some such feature.
The displacements are in units of pixels above and to the right of the
point.  A system may reflect this displacement about the X and/or Y axes
for label deconfliction.  The default displacement is X=0, Y=0. -->

<!ELEMENT Displacement (DisplacementX, DisplacementY) >
<!ELEMENT DisplacementX (#PCDATA) >
<!ELEMENT DisplacementY (#PCDATA) >

<!-- PerpendicularOffset: Gives the perpendicular distance away from
a line to draw a label.  The distance is in pixels and is positive to
the left-hand side of the line string.  Negative numbers mean right.
The default offset is 0. -->

<!ELEMENT PerpendicularOffset (#PCDATA) >

<!-- Halo: A Halo is an extension (sub-type) of a Fill and is applied to
the backgrounds of font glyphs.  Either a Radius or a Block halo type can
be used.  The radius is computed from the outside edge of the font glyph
(or inside of "holes").  The default is a Radius of 1.0 (pixels) but if
no Halo is selected in a containing structure, no halo will be rendered.
The default is a solid white (Color "#FFFFFF") opaque halo. -->

<!ELEMENT Halo (
            (Color | GraphicFill)?,
            Opacity?,
            (Radius | Block)? ) >

<!-- Radius: Gives the absolute size of a halo radius in pixels encoded
as a double float.  The radius is taken from the outside edge of a
font glyph to extend the area of coverage of the glyph.  The glyph's
fill is plotted on top of the halo.  The default radius is one pixel.
Negative values are not allowed.-->

<!ELEMENT Radius (#PCDATA) >

<!-- Block: Gives the absolute size of a block extension in pixels encoded
as a double float.  This parameter is similar to the font Radius parameter
except that this is applied to the bounding box of a label of a font
with square corners.  Whether the bounding box is defined by the exact
label or by the font in general is system- and font-depenent.  The effect
is a block background.  If you want both a block back ground and a halo
(or multiple halos), you can use multiple TextSymbols in the same Rule.
(A system shouldn't try to deconflict labels grouped in this way.)
The default block-background extension is 0 pixels (beyond the bounding
box).  Negative values are not allowed. -->

<!ELEMENT Block (#PCDATA) >


<!-- R A S T E R   S Y M B O L -->

<!-- RasterSymbol: Used to render raster/matrix-coverage data
(e.g., satellite photos, DEMs).  The interpretation of Geometry is
system-dependent, as raster data may be organized differently from feature
data, though omitting this element selects the default raster-data source.
The meanings of the other parameters are described with their element
definitions.  Default values are system or data dependent.  -->

<!ELEMENT RasterSymbol (
            Geometry?,
            Opacity?,
            ChannelSelection?,
            OverlapBehavior?,
            ColorMap?,
            ContrastEnhancement?,
            ShadedRelief?,
            ImageOutline? ) >

<!-- ChannelSelection: This specifies the false-color channel selection
for a multi-spectral raster source (such as a multiband satellite-imagery
source).  Either a channel may be selected to display in each of red,
green, and blue, or a single channel may be selected to display in gray.
(The spelling "gray" is used since it seems to be more common than
"grey" by a ratio of about 3:1.)  Contrast enhancement may be applied
to each channel in isolation.  Channels are identified by a system and
data-dependent character identifier.  Commonly, channels will be labelled
as "1", "2", etc. -->

<!ELEMENT ChannelSelection ((RedChannel, GreenChannel, BlueChannel)
                            | GrayChannel) >
<!ELEMENT RedChannel (SourceChannelName, ContrastEnhancement?) >
<!ELEMENT GreenChannel (SourceChannelName, ContrastEnhancement?) >
<!ELEMENT BlueChannel (SourceChannelName, ContrastEnhancement?) >
<!ELEMENT GrayChannel (SourceChannelName, ContrastEnhancement?) >
<!ELEMENT SourceChannelName (#PCDATA) >

<!-- OverlapBehavior: Tells a system how to behave when multiple raster
images in a layer overlap each other, for example with satellite-image
scenes.  LATEST_ON_TOP and EARLIEST_ON_TOP refer to the time the scene
was captured.  AVERAGE means to average multiple scenes together.
This can produce blury results if the source images are not perfectly
aligned in their geo-referencing.  RANDOM means to select an image (or
piece thereof) randomly and place it on top.  This can produce crisper
results than AVERAGE potentially more efficiently than LATEST_ON_TOP
or EARLIEST_ON_TOP.  The default behavior is system-dependent. -->

<!ELEMENT OverlapBehavior (LATEST_ON_TOP | EARLIEST_ON_TOP | AVERAGE | RANDOM) >
<!ELEMENT LATEST_ON_TOP EMPTY >
<!ELEMENT EARLIEST_ON_TOP EMPTY >
<!ELEMENT AVERAGE EMPTY >
<!ELEMENT RANDOM EMPTY >

<!-- ColorMap: Defines either the colors of a pallet-type raster source
or the mapping of numeric pixel values to colors.  For example, a DEM
raster giving elevations in meters above sea level can be translated to
a colored image with a ColorMap.  ColorMap entries should be in order of
increasing numeric quantity so that intermediate numeric values can be
matched to a color (or be interpolated between two colors).  Labels may be
used for legends or may be used in the future to match character values.
Not all systems can support opacity in colormaps.  The default "opacity"
is 1.0 (fully opaque).  Defaults for "quantity" and "label" are system-
dependent. -->

<!ELEMENT ColorMap ((ColorMapEntry)*) >
<!ELEMENT ColorMapEntry EMPTY >
<!ATTLIST ColorMapEntry color CDATA #REQUIRED
                        opacity CDATA #IMPLIED
                        quantity CDATA #IMPLIED
                        label CDATA #IMPLIED >

<!-- ContrastEnhancement: Defines contrast enhancement for a channel of
a false-color image or for a color image.  In the case of a color image,
the relative grayscale brightness of a pixel color is used.  "Normalize"
means to stretch the contrast so that the dimmest color is stretched to
black and the brightest color is stretched to white, with all colors
in between stretched out uniformly.  "Histogram" means to stretch the
contrast based on a histogram of how many colors are at each brightness
level on input, with the goal of producing equal number of pixels in
the image at each brightness level on output.  This has the effect of
revealing many subtle ground features.  A "GammaValue" tells how much to
brighten (value greater than 1.0) or dim (value less than 1.0) an image.
The default GammaValue is 1.0 (no change). -->

<!ELEMENT ContrastEnhancement ((Normalize | Histogram)?, GammaValue?) >
<!ELEMENT Normalize EMPTY >
<!ELEMENT Histogram EMPTY >
<!ELEMENT GammaValue (#PCDATA) >

<!-- ShadedRelief: Apply relief shading (or "hill shading") to an image.
Exact parameters of the shading are system-dependent (for now).
This shades the edges of hills, mountains, and valleys for a three-
dimensional visual effect.  If the BrightnessOnly flag is "0" (false,
default), the shading is applied to the layer being rendered as the
current raster.  If BrightnessOnly is "1" (true), the shading is applied
to the brightness of the colors in the rendering canvass generated so far
by other layers, with the effect of relief-shading these other layers.
The default for BrightnessOnly is "0" (false). -->

<!ELEMENT ShadedRelief (BrightnessOnly?) >
<!ELEMENT BrightnessOnly (#PCDATA) >

<!-- ImageOutline: This specifies that individual source rasters in
a multi-raster set (such as a set of satellite-image scenes) should be
outlined with either a LineString or Polygon symbol.  An Opacity of 0.0 can
be selected for the main raster to avoid rendering the main-raster pixels,
or an opacity can be used for the Polygon Fill to allow the main-raster
data be seen through the fill. -->

<!ELEMENT ImageOutline (LineStringSymbol | PolygonSymbol) >
