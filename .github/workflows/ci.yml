name: CI
on: push
jobs:
  run:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu
          python: py2
          db: postgis
          django: "1.11.26"
          python_bin: python
          pip_bin: pip
        # TODO: deactivated as django 1.11 does not seem to work with the GEOS version supplied by Ubuntu 20.04
        # - os: ubuntu
        #   python: py3
        #   db: postgis
        #   django: "1.11.26"
        #   python_bin: python3
        #   pip_bin: pip3
        - os: ubuntu
          python: py3
          db: postgis
          django: "2.2.17"
          python_bin: python3
          pip_bin: pip3
        - os: ubuntu
          python: py3
          db: spatialite
          django: "2.2.17"
          python_bin: python3
          pip_bin: pip3
          latest: true
    steps:
      - uses: actions/checkout@v2
      - name: Build the eoxserver docker image
        run: |
          docker build -t eoxserver --build-arg DJANGO=${{ matrix.django }} -f docker/${{ matrix.os }}/${{ matrix.python }}/Dockerfile .
      - name: Run the tests
        env:
          COMPOSE_INTERACTIVE_NO_CLI: 1
        run: |
          cd autotest
          echo "DB=${{ matrix.db }}" >> eoxserver.env
          docker-compose config
          docker-compose up -d
          docker-compose ps
          docker exec -i autotest_autotest_1 ${{ matrix.pip_bin }} install scipy
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} -m eoxserver.services.ows.wps.test_data_types
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} -m eoxserver.services.ows.wps.test_allowed_values
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test --pythonpath=../eoxserver/ eoxserver.core -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test --pythonpath=../eoxserver/ eoxserver.backends -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test --pythonpath=../eoxserver/ eoxserver.services -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test --pythonpath=../eoxserver/ eoxserver.resources.coverages -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test autotest_services --tag wcs20 -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test autotest_services --tag wcs11 -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test autotest_services --tag wcs10 -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test autotest_services --tag wms -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test autotest_services --tag wps -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test autotest_services --tag opensearch -v2
          cd ..
      - name: Upload logs and outputs of failed tests
        uses: 'actions/upload-artifact@v2'
        with:
          name: logs ${{ matrix.python }} ${{ matrix.db }} ${{ matrix.django }}
          path: |
            autotest/autotest/logs/*.log
            autotest/autotest/responses/*
          retention-days: 5
        if: failure()

      # get branch/tag name for later stages
      - name: Branch name
        id: branch_name
        run: |
          echo ::set-output name=SOURCE_BRANCH:: $([[ $GITHUB_REF == refs/heads/* ]] && echo ${GITHUB_REF#refs/heads/} || echo "")
          echo ::set-output name=SOURCE_TAG::$([[ $GITHUB_REF == refs/tags/* ]] && echo ${GITHUB_REF#refs/tags/} || echo "")

      # docker image tagging/publishing
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: success()

      # conditionally tag docker images and push them to dockerhub
      - name: Tag docker latest master image
        run: |
          docker tag eoxserver eoxa/eoxserver:master
        if: success() && steps.branch_name.outputs.SOURCE_BRANCH == 'master' && matrix.latest
      - name: Tag docker latest image
        run: |
          docker tag eoxserver eoxa/eoxserver:latest
        if: success() && matrix.latest
      - name: Tag docker latest release image
        run: |
          docker tag eoxserver eoxa/eoxserver:${{ steps.branch_name.outputs.SOURCE_TAG }}
        if: success() && steps.branch_name.outputs.SOURCE_TAG && matrix.latest
      - name: Tag docker release image with OS and Python/Django versions
        run: |
          docker tag eoxserver eoxa/eoxserver:${{ steps.branch_name.outputs.SOURCE_TAG }}-${{ matrix.os }}-${{ matrix.python }}-django${{ matrix.django }}
        if: success() && startsWith(steps.branch_name.outputs.SOURCE_TAG, 'release-')
      - name: Push docker images
        run: |
          # TODO: --all-tags does not seem to work with the version on github-actions
          # docker push --all-tags eoxa/eoxserver
          for tag in $(docker image ls --format "{{.Tag}}" eoxa/eoxserver) ; do docker push "eoxa/eoxserver:$tag" ; done
        if: success()

      # build a Python package and publish it on pypi
      - name: Build Python package
        id: build_python_release
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel
          python setup.py sdist bdist_wheel
          echo ::set-output name=WHEEL_FILE::$(ls dist/*.whl)
          echo ::set-output name=SRC_DIST_FILE::$(ls dist/*.tar.gz)
      - name: Push package to pypi
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
        if: success() && matrix.latest && startsWith(steps.branch_name.outputs.SOURCE_TAG, 'release-')

      # draft a github release and add files
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.branch_name.outputs.SOURCE_TAG }}
          draft: true
        if: success() && matrix.latest && startsWith(steps.branch_name.outputs.SOURCE_TAG, 'release-')
      - name: Upload Release Asset Wheel
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build_python_release.outputs.WHEEL_FILE }}
          asset_name: ${{ steps.build_python_release.outputs.WHEEL_FILE }}
          asset_content_type: application/x-wheel+zip
        if: success() && matrix.latest && startsWith(steps.branch_name.outputs.SOURCE_TAG, 'release-')
      - name: Upload Release Asset Source Dist
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.build_python_release.outputs.SRC_DIST_FILE }}
          asset_name: ${{ steps.build_python_release.outputs.SRC_DIST_FILE }}
          asset_content_type: application/tar+gzip
        if: success() && matrix.latest && startsWith(steps.branch_name.outputs.SOURCE_TAG, 'release-')

  note:
    runs-on: ubuntu-20.04
    needs: run
    steps:
      # send Slack notifications to the eox organization
      - name: action-slack
        uses: 8398a7/action-slack@v3.8.0
        with:
          status: ${{ needs.run.result }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
