name: CI
on: push
jobs:
  run:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu
          python: py2
          db: postgis
          django: "1.11.26"
          python_bin: python
          pip_bin: pip
        # - os: ubuntu
        #   python: py3
        #   db: postgis
        #   django: "1.11.26"
        #   python_bin: python3
        #   pip_bin: pip3
        - os: ubuntu
          python: py3
          db: postgis
          django: "2.2.17"
          python_bin: python3
          pip_bin: pip3
        - os: ubuntu
          python: py3
          db: spatialite
          django: "2.2.17"
          python_bin: python3
          pip_bin: pip3
          latest: true
    steps:
      - uses: actions/checkout@v2
      - name: Build the eoxserver docker image
        env:
          DEBIAN_FRONTEND: noninteractive
          DEBCONF_NONINTERACTIVE_SEEN: "true"
        run: |
          docker build -t eoxserver --build-arg DJANGO=${{ matrix.django }} -f docker/${{ matrix.os }}/${{ matrix.python }}/Dockerfile .
          # if [[ ${{ matrix.latest }} ]] ; then docker tag eoxserver eoxa/eoxserver:latest ; fi
      - name: Run the actual tests
        env:
          COMPOSE_INTERACTIVE_NO_CLI: 1
        run: |
          cd autotest
          echo "DB=${{ matrix.db }}" >> eoxserver.env
          docker-compose config
          docker-compose up -d
          docker-compose ps
          docker exec -i autotest_autotest_1 ${{ matrix.pip_bin }} install scipy
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} -m eoxserver.services.ows.wps.test_data_types
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} -m eoxserver.services.ows.wps.test_allowed_values
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test --pythonpath=../eoxserver/ eoxserver.core -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test --pythonpath=../eoxserver/ eoxserver.backends -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test --pythonpath=../eoxserver/ eoxserver.services -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test --pythonpath=../eoxserver/ eoxserver.resources.coverages -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test autotest_services --tag wcs20 -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test autotest_services --tag wcs11 -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test autotest_services --tag wcs10 -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test autotest_services --tag wms -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test autotest_services --tag wps -v2
          docker exec -i autotest_autotest_1 ${{ matrix.python_bin }} manage.py test autotest_services --tag opensearch -v2
          cd ..
      # - name: Publish to Docker Hub Registry
      #   uses: elgohr/Publish-Docker-Github-Action@master
      #   with:
      #     name: eoxa/eoxserver
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      #   if: ${{ matrix.latest }}
      - name: Upload logs when failed
        uses: 'actions/upload-artifact@v2'
        with:
          name: logs ${{ matrix.python }} ${{ matrix.db }} ${{ matrix.django }}
          path: autotest/autotest/logs/*.log
          retention-days: 5
        if: ${{ failure() }}
      - name: action-slack
        uses: 8398a7/action-slack@v3.8.0
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
